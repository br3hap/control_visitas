# -*- coding: utf-8 -*-

from openerp import fields, models, api, _
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, DEFAULT_SERVER_DATE_FORMAT
from openerp.exceptions import except_orm, Warning, RedirectWarning
from lxml import etree, objectify
from pytz import timezone
from openerp import workflow
import sys
from openerp.osv import osv
from itertools import product
import re

class account_transfer(models.Model):
    _inherit ='account.transfer'
    
    account_id = fields.Many2one('account.invoice','Comprobante')
    number = fields.Char('Numero')
    detraccion = fields.Boolean('Detracci√≥n')
    
    @api.model
    def create(self,values):
        
        sequence_id = self.pool.get('ir.sequence').search(self._cr, self._uid, [('prefix','=','TR-')], context=self._context)
        if not sequence_id:
            raise osv.except_osv(_('Comunicarse con el Administrador'),_("No existe una secuencia asociada para transferencias, Ejem. 'TR-' "))
        number = self.pool.get('ir.sequence').get_id(self._cr, self._uid, sequence_id, 'id', context=self._context)
                    
        values.update({'number':number})
            
        return super(account_transfer,self).create(values)
    
    @api.multi
    @api.onchange('account_id')
    def evaluar_detraccion(self):
        
        for transfer in self:
            
            if transfer.account_id:
                if transfer.account_id.detraccion:
                    
                    transfer.update({'detraccion':True})
                
                else:
                    transfer.update({'detraccion':False})
    
    
