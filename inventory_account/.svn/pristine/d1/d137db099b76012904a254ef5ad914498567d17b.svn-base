# -*- coding: utf-8 -*-

from openerp import fields, models, api, _
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, DEFAULT_SERVER_DATE_FORMAT
from openerp.exceptions import except_orm, Warning, RedirectWarning
from lxml import etree, objectify
from pytz import timezone
from openerp import workflow
import sys
from openerp.osv import osv
from itertools import product
import re

reload(sys)
sys.setdefaultencoding("utf-8")

class account_invoice(models.Model):
    _inherit='account.invoice'
    
    detraccion=fields.Boolean('¿Sujeta a detracción?')
    medio_pago=fields.Many2one('tabla.pago.dect','Medio de Pago')
    tipo_operacion_detra=fields.Many2one('tabla.operacion.detra','Tipo Operación Detra')
    
    #CAMPOS extra para alamacenar momentaneamente los capos de detraccion para
    #los libros electronicos
    fecha_ope_detra=fields.Date('Fecha de Operación de la detracción')
    codigo_ope_detra=fields.Char('Código de la operación de la Detracción')
    
    total_detraccion = fields.Float('Total Detracción',compute='obtener_monto_detraccion',default=0.00)
    
    
    @api.multi
    @api.onchange('invoice_line')
    def obtener_monto_detraccion(self):
        
        for invoice in self:
            
            if invoice.detraccion and invoice.amount_total>700:
                
                if invoice.invoice_line:
                    tasa_detraccion=0.00
                    
                    for line in invoice.invoice_line:
                        product = line.product_id.product_tmpl_id
                        if product.bien_servicio_detrac:
                            if tasa_detraccion<product.bien_servicio_detrac.porcentaje:
                                tasa_detraccion=product.bien_servicio_detrac.porcentaje
                                
                        else:
                            if product.categ_id.bien_servicio_detrac:
                                if tasa_detraccion<product.categ_id.bien_servicio_detrac.porcentaje:
                                    tasa_detraccion=product.categ_id.bien_servicio_detrac.porcentaje
                    
                    invoice.total_detraccion = invoice.amount_total*tasa_detraccion/100
                    
            
    #@api.multi
    #@api.onchange('codigo_ope_detra')
    #def validar_caracter(self):
        
        #for invoice in self:
            #res={}
            #if invoice.codigo_ope_detra:
                #if re.match("[a-z0-9A-Z]",invoice.codigo_ope_detra) != None:
                        #return
                #else:
                    #invoice.update({'codigo_ope_detra':''})
                    
                    #res = {'warning': {
                    #'title': _('Warning'),
                    #'message': _('Debe registrar solo caracteres alfanuméricos')
                    #}}
            
            #if res:
                #return res  
    
    @api.multi
    @api.onchange('detraccion')
    def validar_tipo_ope(self):
        
        for invoice in self:
            
            if invoice.detraccion:
                catalogo=self.env['catalogo.51'].search([('id','=',17)])
                invoice.update({'tipo_operacion':catalogo})
            
            else:
                catalogo=self.env['catalogo.51'].search([('id','=',1)])
                invoice.update({'tipo_operacion':catalogo})
